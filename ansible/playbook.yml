- hosts: servers
  become: yes
  vars:
    full_image_name: "{{ FULL_IMAGE_NAME }}"
    domain_name: "{{ DOMAIN_NAME }}"

    app_instances:
      - { name: 'my-app-1', port: 8001 }
      - { name: 'my-app-2', port: 8002 }
      - { name: 'my-app-3', port: 8003 }

  tasks:
    - name: Install required packages (Docker, Nginx, Certbot)
      apt:
        name: 
          - docker.io
          - nginx
          - certbot
          - python3-certbot-nginx        
        state: present
        update_cache: yes

    - name: Run Certbot to get/renew a certificate
      command: "certbot --nginx -d {{ domain_name }} --email your-email@example.com --agree-tos --no-eff-email -n"
      args:
        creates: "/etc/letsencrypt/live/{{ domain_name }}/fullchain.pem"

    - name: Ensure Nginx is configured with the upstream pool
      template:
        src: nginx.conf.j2
        dest: /etc/nginx/sites-available/{{ domain_name }}
      notify: Reload Nginx

    - name: Log in to Docker Hub
      community.docker.docker_login:
        username: "{{ DOCKER_USER }}"
        password: "{{ DOCKER_PASS }}"

    - name: "Perform Rolling Update: Deploy new containers one by one"
      loop: "{{ app_instances }}"
      loop_control:
        loop_var: instance
      
      serial: 1
      
      block:
        - name: "Deploy new container to {{ instance.name }} on port {{ instance.port }}"
          community.docker.docker_container:
            name: "{{ instance.name }}"
            image: "{{ full_image_name }}"
            pull: yes
            state: started
            restart_policy: always
            ports:
              - "{{ instance.port }}:8000"

        - name: "Wait for new container {{ instance.name }} to be healthy"
          uri:
            url: "http://localhost:{{ instance.port }}/"
            status_code: 200
          retries: 5
          delay: 10

    - name: Log out from Docker Hub
      community.docker.docker_login:
        state: absent

  handlers:
    - name: Reload Nginx
      service:
        name: nginx
        state: reloaded